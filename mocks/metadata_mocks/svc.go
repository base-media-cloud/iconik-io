// Code generated by MockGen. DO NOT EDIT.
// Source: svc.go
//
// Generated by this command:
//
//	mockgen -source svc.go -destination=../../../../../mocks/metadata_mocks/svc.go -package=metadata_mocks
//
// Package metadata_mocks is a generated GoMock package.
package metadata_mocks

import (
	context "context"
	reflect "reflect"

	metadata "github.com/base-media-cloud/pd-iconik-io-rd/internal/core/domain/iconik/metadata"
	gomock "go.uber.org/mock/gomock"
)

// MockServicer is a mock of Servicer interface.
type MockServicer struct {
	ctrl     *gomock.Controller
	recorder *MockServicerMockRecorder
}

// MockServicerMockRecorder is the mock recorder for MockServicer.
type MockServicerMockRecorder struct {
	mock *MockServicer
}

// NewMockServicer creates a new mock instance.
func NewMockServicer(ctrl *gomock.Controller) *MockServicer {
	mock := &MockServicer{ctrl: ctrl}
	mock.recorder = &MockServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServicer) EXPECT() *MockServicerMockRecorder {
	return m.recorder
}

// GetMetadataView mocks base method.
func (m *MockServicer) GetMetadataView(ctx context.Context, path, viewID string) (metadata.DTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadataView", ctx, path, viewID)
	ret0, _ := ret[0].(metadata.DTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetadataView indicates an expected call of GetMetadataView.
func (mr *MockServicerMockRecorder) GetMetadataView(ctx, path, viewID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadataView", reflect.TypeOf((*MockServicer)(nil).GetMetadataView), ctx, path, viewID)
}

// UpdateMetadataInAsset mocks base method.
func (m *MockServicer) UpdateMetadataInAsset(ctx context.Context, path, viewID, assetID string, payload []byte) (metadata.DTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMetadataInAsset", ctx, path, viewID, assetID, payload)
	ret0, _ := ret[0].(metadata.DTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMetadataInAsset indicates an expected call of UpdateMetadataInAsset.
func (mr *MockServicerMockRecorder) UpdateMetadataInAsset(ctx, path, viewID, assetID, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetadataInAsset", reflect.TypeOf((*MockServicer)(nil).UpdateMetadataInAsset), ctx, path, viewID, assetID, payload)
}
