// Code generated by MockGen. DO NOT EDIT.
// Source: svc.go
//
// Generated by this command:
//
//	mockgen -source svc.go -destination=../../../../../mocks/search_mocks/svc.go -package=search_mocks
//
// Package search_mocks is a generated GoMock package.
package search_mocks

import (
	context "context"
	reflect "reflect"

	search "github.com/base-media-cloud/pd-iconik-io-rd/internal/core/domain/iconik/search"
	gomock "go.uber.org/mock/gomock"
)

// MockServicer is a mock of Servicer interface.
type MockServicer struct {
	ctrl     *gomock.Controller
	recorder *MockServicerMockRecorder
}

// MockServicerMockRecorder is the mock recorder for MockServicer.
type MockServicerMockRecorder struct {
	mock *MockServicer
}

// NewMockServicer creates a new mock instance.
func NewMockServicer(ctrl *gomock.Controller) *MockServicer {
	mock := &MockServicer{ctrl: ctrl}
	mock.recorder = &MockServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServicer) EXPECT() *MockServicerMockRecorder {
	return m.recorder
}

// Search mocks base method.
func (m *MockServicer) Search(ctx context.Context, path string, payload []byte) (search.ResultsDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, path, payload)
	ret0, _ := ret[0].(search.ResultsDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockServicerMockRecorder) Search(ctx, path, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockServicer)(nil).Search), ctx, path, payload)
}

// ValidateAndSearchAssetID mocks base method.
func (m *MockServicer) ValidateAndSearchAssetID(ctx context.Context, assetID, collectionID string) (search.ObjectDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateAndSearchAssetID", ctx, assetID, collectionID)
	ret0, _ := ret[0].(search.ObjectDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateAndSearchAssetID indicates an expected call of ValidateAndSearchAssetID.
func (mr *MockServicerMockRecorder) ValidateAndSearchAssetID(ctx, assetID, collectionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateAndSearchAssetID", reflect.TypeOf((*MockServicer)(nil).ValidateAndSearchAssetID), ctx, assetID, collectionID)
}

// ValidateAndSearchFilename mocks base method.
func (m *MockServicer) ValidateAndSearchFilename(ctx context.Context, filename, collectionID string) (search.ObjectDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateAndSearchFilename", ctx, filename, collectionID)
	ret0, _ := ret[0].(search.ObjectDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateAndSearchFilename indicates an expected call of ValidateAndSearchFilename.
func (mr *MockServicerMockRecorder) ValidateAndSearchFilename(ctx, filename, collectionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateAndSearchFilename", reflect.TypeOf((*MockServicer)(nil).ValidateAndSearchFilename), ctx, filename, collectionID)
}
