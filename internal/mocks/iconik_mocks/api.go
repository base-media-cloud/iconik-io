// Code generated by MockGen. DO NOT EDIT.
// Source: api.go
//
// Generated by this command:
//
//	mockgen -source api.go -destination=../../mocks/iconik_mocks/api.go -package=iconik_mocks
//
// Package iconik_mocks is a generated GoMock package.
package iconik_mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	syncmap "golang.org/x/sync/syncmap"
)

// MockRequester is a mock of Requester interface.
type MockRequester struct {
	ctrl     *gomock.Controller
	recorder *MockRequesterMockRecorder
}

// MockRequesterMockRecorder is the mock recorder for MockRequester.
type MockRequesterMockRecorder struct {
	mock *MockRequester
}

// NewMockRequester creates a new mock instance.
func NewMockRequester(ctrl *gomock.Controller) *MockRequester {
	mock := &MockRequester{ctrl: ctrl}
	mock.recorder = &MockRequesterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequester) EXPECT() *MockRequesterMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockRequester) Do(ctx context.Context, method, url string, headers *syncmap.Map, queryParams map[string]string, payload []byte) ([]byte, *int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx, method, url, headers, queryParams, payload)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(*int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Do indicates an expected call of Do.
func (mr *MockRequesterMockRecorder) Do(ctx, method, url, headers, queryParams, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockRequester)(nil).Do), ctx, method, url, headers, queryParams, payload)
}
